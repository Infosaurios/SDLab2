// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	CombineMsg(ctx context.Context, in *MessageUploadCombine, opts ...grpc.CallOption) (*ConfirmationFromNameNode, error)
	ToDataNodeMsg(ctx context.Context, in *MessageUploadToDataNode, opts ...grpc.CallOption) (*ConfirmationFromDataNode, error)
	ReqInterruption(ctx context.Context, in *Interruption, opts ...grpc.CallOption) (*ConfirmInt, error)
	ReqInterruptionNodes(ctx context.Context, in *Interruption, opts ...grpc.CallOption) (*ConfirmInt, error)
	ReceiveCategorySendDataToRebels(ctx context.Context, in *CategorySelected, opts ...grpc.CallOption) (*DataFromOneCategory, error)
	// rpc NameNodeDataNode (idSelected) returns (infoById);
	ReceiveIdSendDataToNameNode(ctx context.Context, in *IdSelected, opts ...grpc.CallOption) (*InfoById, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) CombineMsg(ctx context.Context, in *MessageUploadCombine, opts ...grpc.CallOption) (*ConfirmationFromNameNode, error) {
	out := new(ConfirmationFromNameNode)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/CombineMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ToDataNodeMsg(ctx context.Context, in *MessageUploadToDataNode, opts ...grpc.CallOption) (*ConfirmationFromDataNode, error) {
	out := new(ConfirmationFromDataNode)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/ToDataNodeMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReqInterruption(ctx context.Context, in *Interruption, opts ...grpc.CallOption) (*ConfirmInt, error) {
	out := new(ConfirmInt)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/reqInterruption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReqInterruptionNodes(ctx context.Context, in *Interruption, opts ...grpc.CallOption) (*ConfirmInt, error) {
	out := new(ConfirmInt)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/reqInterruptionNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReceiveCategorySendDataToRebels(ctx context.Context, in *CategorySelected, opts ...grpc.CallOption) (*DataFromOneCategory, error) {
	out := new(DataFromOneCategory)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/ReceiveCategorySendDataToRebels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReceiveIdSendDataToNameNode(ctx context.Context, in *IdSelected, opts ...grpc.CallOption) (*InfoById, error) {
	out := new(InfoById)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/ReceiveIdSendDataToNameNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	CombineMsg(context.Context, *MessageUploadCombine) (*ConfirmationFromNameNode, error)
	ToDataNodeMsg(context.Context, *MessageUploadToDataNode) (*ConfirmationFromDataNode, error)
	ReqInterruption(context.Context, *Interruption) (*ConfirmInt, error)
	ReqInterruptionNodes(context.Context, *Interruption) (*ConfirmInt, error)
	ReceiveCategorySendDataToRebels(context.Context, *CategorySelected) (*DataFromOneCategory, error)
	// rpc NameNodeDataNode (idSelected) returns (infoById);
	ReceiveIdSendDataToNameNode(context.Context, *IdSelected) (*InfoById, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) CombineMsg(context.Context, *MessageUploadCombine) (*ConfirmationFromNameNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombineMsg not implemented")
}
func (UnimplementedMessageServiceServer) ToDataNodeMsg(context.Context, *MessageUploadToDataNode) (*ConfirmationFromDataNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToDataNodeMsg not implemented")
}
func (UnimplementedMessageServiceServer) ReqInterruption(context.Context, *Interruption) (*ConfirmInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqInterruption not implemented")
}
func (UnimplementedMessageServiceServer) ReqInterruptionNodes(context.Context, *Interruption) (*ConfirmInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqInterruptionNodes not implemented")
}
func (UnimplementedMessageServiceServer) ReceiveCategorySendDataToRebels(context.Context, *CategorySelected) (*DataFromOneCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCategorySendDataToRebels not implemented")
}
func (UnimplementedMessageServiceServer) ReceiveIdSendDataToNameNode(context.Context, *IdSelected) (*InfoById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveIdSendDataToNameNode not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_CombineMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUploadCombine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CombineMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/CombineMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CombineMsg(ctx, req.(*MessageUploadCombine))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ToDataNodeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUploadToDataNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ToDataNodeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/ToDataNodeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ToDataNodeMsg(ctx, req.(*MessageUploadToDataNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReqInterruption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interruption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReqInterruption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/reqInterruption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReqInterruption(ctx, req.(*Interruption))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReqInterruptionNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interruption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReqInterruptionNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/reqInterruptionNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReqInterruptionNodes(ctx, req.(*Interruption))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReceiveCategorySendDataToRebels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorySelected)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReceiveCategorySendDataToRebels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/ReceiveCategorySendDataToRebels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReceiveCategorySendDataToRebels(ctx, req.(*CategorySelected))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReceiveIdSendDataToNameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdSelected)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReceiveIdSendDataToNameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/ReceiveIdSendDataToNameNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReceiveIdSendDataToNameNode(ctx, req.(*IdSelected))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CombineMsg",
			Handler:    _MessageService_CombineMsg_Handler,
		},
		{
			MethodName: "ToDataNodeMsg",
			Handler:    _MessageService_ToDataNodeMsg_Handler,
		},
		{
			MethodName: "reqInterruption",
			Handler:    _MessageService_ReqInterruption_Handler,
		},
		{
			MethodName: "reqInterruptionNodes",
			Handler:    _MessageService_ReqInterruptionNodes_Handler,
		},
		{
			MethodName: "ReceiveCategorySendDataToRebels",
			Handler:    _MessageService_ReceiveCategorySendDataToRebels_Handler,
		},
		{
			MethodName: "ReceiveIdSendDataToNameNode",
			Handler:    _MessageService_ReceiveIdSendDataToNameNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}
